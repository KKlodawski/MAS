// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectImplementation.Mdl;

#nullable disable

namespace ProjectImplementation.Migrations
{
    [DbContext(typeof(TestmasContext))]
    partial class TestmasContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "8.0.0-preview.1.23111.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("Druzynagra", b =>
                {
                    b.Property<int>("DruzynaId")
                        .HasColumnType("int(11)")
                        .HasColumnName("DruzynaID");

                    b.Property<int>("GraId")
                        .HasColumnType("int(11)")
                        .HasColumnName("GraID");

                    b.HasKey("DruzynaId", "GraId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "GraId" }, "GraID");

                    b.ToTable("druzynagra", (string)null);
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Druzyna", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<string>("NazwaDruzyny")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Rola")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("druzyna", (string)null);
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Druzyna+Zadanie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<int>("DruzynaId")
                        .HasColumnType("int(11)");

                    b.Property<string>("NazwaZadania")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Opis")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("enum('wtrakcie','zakonczone','przerwane')");

                    b.Property<DateOnly>("Termin")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("DruzynaId");

                    b.ToTable("zadanie", (string)null);
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Gra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<DateOnly?>("DataWydania")
                        .HasColumnType("date")
                        .HasColumnName("DataWydania");

                    b.Property<string>("Gatunki")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Tytul")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("gra", (string)null);
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Graaktor", b =>
                {
                    b.Property<int>("GraId")
                        .HasColumnType("int(11)")
                        .HasColumnName("GraID");

                    b.Property<int>("AktorId")
                        .HasColumnType("int(11)")
                        .HasColumnName("AktorID");

                    b.Property<string>("Postac")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("GraId", "AktorId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "AktorId" }, "AktorID");

                    b.ToTable("graaktor", (string)null);
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Osoba", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<DateOnly>("DataUrodzenia")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Pensja")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Pesel" }, "Pesel")
                        .IsUnique();

                    b.ToTable("osoba", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Przegladwydajnosci", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<DateOnly>("DataPrzegladu")
                        .HasColumnType("date");

                    b.Property<string>("Komentarz")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("KrytykId")
                        .HasColumnType("int(11)")
                        .HasColumnName("KrytykID");

                    b.Property<int>("Ocena")
                        .HasColumnType("int(11)");

                    b.Property<int?>("PracownikId")
                        .HasColumnType("int(11)")
                        .HasColumnName("PracownikID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "KrytykId" }, "KrytykID");

                    b.HasIndex(new[] { "PracownikId" }, "PracownikID")
                        .HasDatabaseName("PracownikID1");

                    b.ToTable("przegladwydajnosci", (string)null);
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ID");

                    b.Property<DateOnly>("DataTestowania")
                        .HasColumnType("date");

                    b.Property<int?>("GraId")
                        .HasColumnType("int(11)")
                        .HasColumnName("GraID");

                    b.Property<string>("Komentarz")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TesterId")
                        .HasColumnType("int(11)")
                        .HasColumnName("TesterID");

                    b.Property<string>("Wynik")
                        .IsRequired()
                        .HasColumnType("enum('zaliczony','niezaliczony')");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GraId" }, "GraID")
                        .HasDatabaseName("GraID1");

                    b.HasIndex(new[] { "TesterId" }, "TesterID");

                    b.ToTable("test", (string)null);
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Aktor", b =>
                {
                    b.HasBaseType("ProjectImplementation.Mdl.Osoba");

                    b.Property<int>("IloscLinii")
                        .HasColumnType("int(11)");

                    b.Property<decimal>("ZaplataZaLinie")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.ToTable("aktor", (string)null);
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Krytyk", b =>
                {
                    b.HasBaseType("ProjectImplementation.Mdl.Osoba");

                    b.Property<int?>("OsobaId")
                        .HasColumnType("int(11)")
                        .HasColumnName("OsobaID");

                    b.Property<string>("Specjalizacja")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("WynagrodzenieZaOcene")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasIndex(new[] { "OsobaId" }, "OsobaID");

                    b.ToTable("krytyk", (string)null);
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Pracownik", b =>
                {
                    b.HasBaseType("ProjectImplementation.Mdl.Osoba");

                    b.Property<int>("CzasPracy")
                        .HasColumnType("int(11)");

                    b.Property<DateOnly>("DataZatrudnienia")
                        .HasColumnType("date");

                    b.Property<int?>("DruzynaId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("OsobaId")
                        .HasColumnType("int");

                    b.HasIndex("DruzynaId");

                    b.ToTable("pracownik", (string)null);
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Tester", b =>
                {
                    b.HasBaseType("ProjectImplementation.Mdl.Osoba");

                    b.Property<int>("Doswiadczenie")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int?>("OsobaId")
                        .HasColumnType("int(11)")
                        .HasColumnName("OsobaID");

                    b.Property<decimal>("WynagrodzenieZaTest")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasIndex(new[] { "OsobaId" }, "OsobaID")
                        .HasDatabaseName("OsobaID1");

                    b.ToTable("tester", (string)null);
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.AktorPracownik", b =>
                {
                    b.HasBaseType("ProjectImplementation.Mdl.Aktor");

                    b.Property<int?>("AktorId")
                        .HasColumnType("int(11)")
                        .HasColumnName("AktorID");

                    b.Property<int>("CzasPracy")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DataZatrudnienia")
                        .HasColumnType("date");

                    b.HasIndex("AktorId")
                        .IsUnique();

                    b.ToTable("AktorPracownik", (string)null);
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Menadzer", b =>
                {
                    b.HasBaseType("ProjectImplementation.Mdl.Pracownik");

                    b.Property<decimal>("Bonus")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("PracownikId")
                        .HasColumnType("int(11)")
                        .HasColumnName("PracownikID");

                    b.HasIndex("PracownikId")
                        .IsUnique();

                    b.HasIndex(new[] { "PracownikId" }, "PracownikID");

                    b.ToTable("menadzer", (string)null);
                });

            modelBuilder.Entity("Druzynagra", b =>
                {
                    b.HasOne("ProjectImplementation.Mdl.Druzyna", null)
                        .WithMany()
                        .HasForeignKey("DruzynaId")
                        .IsRequired()
                        .HasConstraintName("druzynagra_ibfk_1");

                    b.HasOne("ProjectImplementation.Mdl.Gra", null)
                        .WithMany()
                        .HasForeignKey("GraId")
                        .IsRequired()
                        .HasConstraintName("druzynagra_ibfk_2");
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Druzyna+Zadanie", b =>
                {
                    b.HasOne("ProjectImplementation.Mdl.Druzyna", null)
                        .WithMany("Zadanies")
                        .HasForeignKey("DruzynaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Graaktor", b =>
                {
                    b.HasOne("ProjectImplementation.Mdl.Aktor", "Aktor")
                        .WithMany("Graaktors")
                        .HasForeignKey("AktorId")
                        .IsRequired()
                        .HasConstraintName("graaktor_ibfk_2");

                    b.HasOne("ProjectImplementation.Mdl.Gra", "Gra")
                        .WithMany("Graaktors")
                        .HasForeignKey("GraId")
                        .IsRequired()
                        .HasConstraintName("graaktor_ibfk_1");

                    b.Navigation("Aktor");

                    b.Navigation("Gra");
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Przegladwydajnosci", b =>
                {
                    b.HasOne("ProjectImplementation.Mdl.Krytyk", "Krytyk")
                        .WithMany("Przegladwydajnoscis")
                        .HasForeignKey("KrytykId")
                        .HasConstraintName("przegladwydajnosci_ibfk_2");

                    b.HasOne("ProjectImplementation.Mdl.Pracownik", "Pracownik")
                        .WithMany("Przegladwydajnoscis")
                        .HasForeignKey("PracownikId")
                        .HasConstraintName("przegladwydajnosci_ibfk_1");

                    b.Navigation("Krytyk");

                    b.Navigation("Pracownik");
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Test", b =>
                {
                    b.HasOne("ProjectImplementation.Mdl.Gra", "Gra")
                        .WithMany("Tests")
                        .HasForeignKey("GraId")
                        .HasConstraintName("test_ibfk_1");

                    b.HasOne("ProjectImplementation.Mdl.Tester", "Tester")
                        .WithMany("Tests")
                        .HasForeignKey("TesterId")
                        .HasConstraintName("test_ibfk_2");

                    b.Navigation("Gra");

                    b.Navigation("Tester");
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Aktor", b =>
                {
                    b.HasOne("ProjectImplementation.Mdl.Osoba", null)
                        .WithOne()
                        .HasForeignKey("ProjectImplementation.Mdl.Aktor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Krytyk", b =>
                {
                    b.HasOne("ProjectImplementation.Mdl.Osoba", null)
                        .WithOne()
                        .HasForeignKey("ProjectImplementation.Mdl.Krytyk", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectImplementation.Mdl.Osoba", "Osoba")
                        .WithMany("Krytyks")
                        .HasForeignKey("OsobaId")
                        .HasConstraintName("krytyk_ibfk_1");

                    b.Navigation("Osoba");
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Pracownik", b =>
                {
                    b.HasOne("ProjectImplementation.Mdl.Druzyna", "Druzyna")
                        .WithMany("Pracowniks")
                        .HasForeignKey("DruzynaId");

                    b.HasOne("ProjectImplementation.Mdl.Osoba", null)
                        .WithOne()
                        .HasForeignKey("ProjectImplementation.Mdl.Pracownik", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ProjectImplementation.Mdl.Adres", "Adres", b1 =>
                        {
                            b1.Property<int>("PracownikId")
                                .HasColumnType("int(11)");

                            b1.Property<string>("kodPocztowy")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("kodPocztowy");

                            b1.Property<string>("miasto")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("miasto");

                            b1.Property<int>("nrDomu")
                                .HasColumnType("int")
                                .HasColumnName("nrDomu");

                            b1.Property<string>("ulica")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("ulica");

                            b1.HasKey("PracownikId");

                            b1.ToTable("pracownik");

                            b1.WithOwner()
                                .HasForeignKey("PracownikId");
                        });

                    b.Navigation("Adres")
                        .IsRequired();

                    b.Navigation("Druzyna");
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Tester", b =>
                {
                    b.HasOne("ProjectImplementation.Mdl.Osoba", null)
                        .WithOne()
                        .HasForeignKey("ProjectImplementation.Mdl.Tester", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectImplementation.Mdl.Osoba", "Osoba")
                        .WithMany("Testers")
                        .HasForeignKey("OsobaId")
                        .HasConstraintName("tester_ibfk_1");

                    b.Navigation("Osoba");
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.AktorPracownik", b =>
                {
                    b.HasOne("ProjectImplementation.Mdl.Aktor", "Aktor")
                        .WithOne("AktorPracownik")
                        .HasForeignKey("ProjectImplementation.Mdl.AktorPracownik", "AktorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("aktorpracownik_ibfk_1");

                    b.HasOne("ProjectImplementation.Mdl.Aktor", null)
                        .WithOne()
                        .HasForeignKey("ProjectImplementation.Mdl.AktorPracownik", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ProjectImplementation.Mdl.Adres", "Adres", b1 =>
                        {
                            b1.Property<int>("AktorPracownikId")
                                .HasColumnType("int(11)");

                            b1.Property<string>("kodPocztowy")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("kodPocztowy");

                            b1.Property<string>("miasto")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("miasto");

                            b1.Property<int>("nrDomu")
                                .HasColumnType("int")
                                .HasColumnName("nrDomu");

                            b1.Property<string>("ulica")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("ulica");

                            b1.HasKey("AktorPracownikId");

                            b1.ToTable("AktorPracownik");

                            b1.WithOwner()
                                .HasForeignKey("AktorPracownikId");
                        });

                    b.Navigation("Adres")
                        .IsRequired();

                    b.Navigation("Aktor");
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Menadzer", b =>
                {
                    b.HasOne("ProjectImplementation.Mdl.Pracownik", null)
                        .WithOne()
                        .HasForeignKey("ProjectImplementation.Mdl.Menadzer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectImplementation.Mdl.Pracownik", "Pracownik")
                        .WithOne("Menadzer")
                        .HasForeignKey("ProjectImplementation.Mdl.Menadzer", "PracownikId")
                        .HasConstraintName("menadzer_ibfk_1");

                    b.Navigation("Pracownik");
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Druzyna", b =>
                {
                    b.Navigation("Pracowniks");

                    b.Navigation("Zadanies");
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Gra", b =>
                {
                    b.Navigation("Graaktors");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Osoba", b =>
                {
                    b.Navigation("Krytyks");

                    b.Navigation("Testers");
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Aktor", b =>
                {
                    b.Navigation("AktorPracownik")
                        .IsRequired();

                    b.Navigation("Graaktors");
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Krytyk", b =>
                {
                    b.Navigation("Przegladwydajnoscis");
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Pracownik", b =>
                {
                    b.Navigation("Menadzer")
                        .IsRequired();

                    b.Navigation("Przegladwydajnoscis");
                });

            modelBuilder.Entity("ProjectImplementation.Mdl.Tester", b =>
                {
                    b.Navigation("Tests");
                });
#pragma warning restore 612, 618
        }
    }
}
